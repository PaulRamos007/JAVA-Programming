package a6;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import cputils.FileUtilsExceptionsThrown;
import java.io.FileNotFoundException;
import javax.swing.JOptionPane;

public class MainForm extends javax.swing.JFrame implements ActionListener {

    Location[] locations = null;
    FlightSchedule schedule = null;

    public MainForm() {
        initComponents();
        initComboQuery();
        initComboFormat();
        initComboReport();
        activateInputState();
        this.pack();
    }

    private void activateInputState() {
        txtStatus.setEditable(false);
        txtStatus.setText("No data loaded.");
        txtLocationsFile.setEnabled(true);
        txtFlightsFile.setEnabled(true);
        btnLoad.setEnabled(true);
        btnAllFlightsDisplayFormat.setEnabled(false);
        btnAllFlightsArchiveFormat.setEnabled(false);
        comboQuery.setEnabled(false);
        comboParameter.setEnabled(false);
        comboFormat.setEnabled(false);
        comboReport.setEnabled(false);
        btnQuery.setEnabled(false);
        btnReport.setEnabled(false);
        txtOutput.setEnabled(false);
    }

    private void activateReadyState() {
        txtStatus.setText("Data files loaded.");
        txtLocationsFile.setEnabled(false);
        txtFlightsFile.setEnabled(false);
        btnLoad.setEnabled(false);
        btnAllFlightsDisplayFormat.setEnabled(true);
        btnAllFlightsArchiveFormat.setEnabled(true);
        comboQuery.setEnabled(true);
        comboParameter.setEnabled(true);
        comboFormat.setEnabled(true);
        comboReport.setEnabled(true);
        btnQuery.setEnabled(true);
        btnReport.setEnabled(true);
        txtOutput.setEnabled(true);
        comboQuery.setSelectedIndex(0); // needed to populate params box initially
    }

    private void initComboQuery() {
        comboQuery.removeAllItems();
        comboQuery.addItem(Common.DESTINATION);
        comboQuery.addItem(Common.FLIGHT_TYPE);
        comboQuery.addActionListener(this);
    }

    private void initComboFormat() {
        comboFormat.removeAllItems();
        comboFormat.addItem(Common.DISPLAY_FORMAT);
        comboFormat.addItem(Common.ARCHIVE_FORMAT);
    }

    private void initComboReport() {
        comboReport.removeAllItems();
        comboReport.addItem(Common.SUMMARY_FLIGHT_TYPE);
        comboReport.addItem(Common.SUMMARY_DESTINATION);
        comboReport.addItem(Common.POLICY_ERRORS);
    }

    /**
     * What to do when the selection in the query combo box changes.
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        comboParameter.removeAllItems();
        String queryType = comboQuery.getSelectedItem().toString();
        if (queryType.equals(Common.FLIGHT_TYPE)) {
            comboParameter.addItem(Common.CARGO);
            comboParameter.addItem(Common.PASSENGER);
            comboParameter.addItem(Common.TRAINING);
        } else if (queryType.equals(Common.DESTINATION)) {
            for (int i = 0; i < locations.length; i++) {
                Location temp = locations[i];
                comboParameter.addItem(temp.getLocationCode() + " (" + temp.getCity() + ", " + temp.getCountry() + ")");
            }

        }
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtLocationsFile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtFlightsFile = new javax.swing.JTextField();
        btnLoad = new javax.swing.JButton();
        btnAllFlightsDisplayFormat = new javax.swing.JButton();
        btnAllFlightsArchiveFormat = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnQuery = new javax.swing.JButton();
        comboParameter = new javax.swing.JComboBox();
        comboQuery = new javax.swing.JComboBox();
        comboFormat = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        comboReport = new javax.swing.JComboBox();
        btnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Assignment 6 - A Flight Schedule");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel2.setText("Locations:");

        txtLocationsFile.setText("locations.csv");

        jLabel1.setText("Flights:");

        txtFlightsFile.setText("flights.csv");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnAllFlightsDisplayFormat.setText("All Flights in Display Format");
        btnAllFlightsDisplayFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllFlightsDisplayFormatActionPerformed(evt);
            }
        });

        btnAllFlightsArchiveFormat.setText("All Flights in Archive Format");
        btnAllFlightsArchiveFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllFlightsArchiveFormatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLocationsFile)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFlightsFile, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLoad))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAllFlightsDisplayFormat)
                        .addGap(18, 18, 18)
                        .addComponent(btnAllFlightsArchiveFormat)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLocationsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad)
                    .addComponent(jLabel1)
                    .addComponent(txtFlightsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAllFlightsDisplayFormat)
                    .addComponent(btnAllFlightsArchiveFormat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtStatus.setEditable(false);
        txtStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Queries"));

        btnQuery.setText("Execute Query");
        btnQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryActionPerformed(evt);
            }
        });

        comboParameter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboQuery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnQuery)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuery))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Reports"));

        comboReport.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnReport.setText("Display Report");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReport)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReport))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed

        String flightsFile = txtFlightsFile.getText();
        String locationsFile = txtLocationsFile.getText();
        locations = createLocations(locationsFile);
        Flight[] allFlights = createFlights(flightsFile);
        schedule = new FlightSchedule(allFlights);
        activateReadyState();

    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryActionPerformed

        String query = comboQuery.getSelectedItem().toString();
        String param = comboParameter.getSelectedItem().toString();
        String format = comboFormat.getSelectedItem().toString();
        Flight[] flights = null;

        if (query.equals(Common.FLIGHT_TYPE)) {
            flights = schedule.getFlightsByType(param);
        } else if (query.equals(Common.DESTINATION)) {
            param = param.substring(0, 3);
            flights = schedule.getFlightsByDestination(param);
        }

        int totalWeight = findTotalWeight(flights);

        if (format.equals(Common.ARCHIVE_FORMAT)) {
            outputFlightsInArchiveFormat(flights);
        } else if (format.equals(Common.DISPLAY_FORMAT)) {
            outputFlightsInDisplayFormat(flights);
        }
        txtOutput.append("\n" + "Total Weight = " + Common.format(totalWeight));


    }//GEN-LAST:event_btnQueryActionPerformed

private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed

    String report = comboReport.getSelectedItem().toString();

    if (report.equals(Common.SUMMARY_FLIGHT_TYPE)) {
        reportSummaryByFlightType();
    }
    else if (report.equals(Common.SUMMARY_DESTINATION)) {
        reportSummaryByDestination();
    }
    else if (report.equals(Common.POLICY_ERRORS)){
        reportPolicyErrors();
    }

}//GEN-LAST:event_btnReportActionPerformed

    private void btnAllFlightsDisplayFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllFlightsDisplayFormatActionPerformed

        outputFlightsInDisplayFormat(schedule.getAllFlights());

    }//GEN-LAST:event_btnAllFlightsDisplayFormatActionPerformed

    private void btnAllFlightsArchiveFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllFlightsArchiveFormatActionPerformed

        outputFlightsInArchiveFormat(schedule.getAllFlights());

    }//GEN-LAST:event_btnAllFlightsArchiveFormatActionPerformed

    private void reportSummaryByFlightType() {
        Flight[] passenger = schedule.getFlightsByType(Common.PASSENGER);
        Flight[] cargo = schedule.getFlightsByType(Common.CARGO);
        Flight[] training = schedule.getFlightsByType(Common.TRAINING);
        
        int cargoWeight = findTotalWeight(cargo);
        int passengerWeight = findTotalWeight(passenger);
        int trainingWeight = findTotalWeight(training);
        int allFlightsWeight = findTotalWeight(schedule.getAllFlights());
        
        
        txtOutput.setText("Summary of Flights by Type:\n\n ");
        txtOutput.append(cargo.length + " Cargo Flights\t" + "Weight = " +Common.format(cargoWeight) + "\n ");
        txtOutput.append(passenger.length + " Passenger Flights\t" + "Weight = " +Common.format(passengerWeight) + "\n ");
        txtOutput.append(training.length + " Training Flights\t" + "Weight = " +Common.format(trainingWeight) + "\n");
        txtOutput.append("__________________________________________\n");
        txtOutput.append(schedule.getAllFlights().length + " Flights\t\t" + "Weight = " + Common.format(allFlightsWeight));
    }

    private void reportSummaryByDestination() {
        txtOutput.setText("Summary of Flights by destination:\n\n");
        
        for (Location location : locations) {
            Flight[] locationFlights = schedule.getFlightsByDestination(location.getLocationCode());
            if (locationFlights.length > 0) {
                txtOutput.append("  " + locationFlights.length + " flights to " + location.getLocationCode()
                    + "     \tWeight = " + Common.format(findTotalWeight(locationFlights)) + "\n"); 
            }
        }
        txtOutput.append("_________________________________________________\n");
        txtOutput.append(schedule.getAllFlights().length + " Flights\t\tWeight = " + Common.format(findTotalWeight(schedule.getAllFlights()))); 
    }
    
    private void reportPolicyErrors(){
        Flight[] currentFlights = schedule.getAllFlights();
        String[] policyChecks = ErrorReporter.runPolicyChecks(currentFlights);
        txtOutput.setText("Policy Errors \n");
        
        for (int i = 0; i < policyChecks.length; i++) {
            if (!policyChecks[i].contains(Common.NO_ERROR)) {
                txtOutput.append("\n" + currentFlights[i].toArchiveFormat() + "\n" + policyChecks[i] + "\n");
            }
        }
    }

    private void outputFlightsInArchiveFormat(Flight[] flights) {
        txtOutput.setText("");

        for (int i = 0; i < flights.length; i++) {
            txtOutput.append(flights[i].toArchiveFormat() + "\n");
        }
    }

    private void outputFlightsInDisplayFormat(Flight[] flights) {
        txtOutput.setText("");

        for (int i = 0; i < flights.length; i++) {
            txtOutput.append(flights[i].toDisplayFormat() + "\n");
        }
    }

    private int findTotalWeight(Flight[] flights) {
        int res = 0;

        for (int i = 0; i < flights.length; i++) {
            res += flights[i].calculateWeight();
        }

        return res;
    }

    /**
     * Creates Flight objects from data in a file.
     *
     * @param fileName the file containing the flight data
     * @return an array of Flight objects
     */
    private Flight[] createFlights(String fileName) {
        
        try {
            String[] data = FileUtilsExceptionsThrown.readIntoArray(fileName);
            Flight[] flights = new Flight[data.length];
            
            for (int i = 0; i < data.length; i++) {
                String[] details = data[i].split(",");
                
                String type = details[0];
                String flightNumber = details[1];
                String dayOfWeek = details[2];
                int departureTime = Integer.parseInt(details[3]);
                Location location = findLocation(details[4]);
                int crewNum = Integer.parseInt(details[5]);
                
                switch (type) {
                    case Common.CARGO:
                        int cargo = Integer.parseInt(details[6]);
                        flights[i] = new CargoFlight(cargo, flightNumber, dayOfWeek, departureTime, location, cargo);
                        break;
                    case Common.PASSENGER:
                        int passengers = Integer.parseInt(details[6]);
                        flights[i] = new PassengerFlight(passengers, flightNumber, dayOfWeek, departureTime, location, crewNum);
                        break;
                    default:
                        flights[i] = new TrainingFlight(flightNumber, dayOfWeek, departureTime, location, crewNum);
                        break;
                }
            }
            return flights;
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error Reading File", JOptionPane.ERROR);
        } 
        return null;  
        
    }

    /**
     * Creates Location objects from data in a file.
     *
     * @param fileName the file containing the location data
     * @return an array of Location objects
     */
    private Location[] createLocations(String fileName) {
        Location[] res = null;

        try {
            String[] data = FileUtilsExceptionsThrown.readIntoArray(fileName);
            res = new Location[data.length];
            for (int i = 0; i < data.length; i++) {
                String temp = data[i];
                String[] pieces = temp.split(",");
                String locationCode = pieces[0];
                String city = pieces[1];
                String country = pieces[2];
                int region = Integer.parseInt(pieces[3]);
                res[i] = new Location(locationCode, city, country, region);
            }
        } catch (FileNotFoundException ex) {
            res = new Location[0];
        }

        return res;
    } // end createLocations

    /**
     * Finds the Location object with the specified location code.
     *
     * @param locationCode the three-letter location code to match
     * @return the Location object with that code.
     */
    private Location findLocation(String locationCode) {
        Location res = null;

        for (int i = 0; i < locations.length; i++) {
            if (locations[i].getLocationCode().equals(locationCode)) {
                res = locations[i];
                break;
            }
        }

        return res;
    } // end findLocation

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllFlightsArchiveFormat;
    private javax.swing.JButton btnAllFlightsDisplayFormat;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnQuery;
    private javax.swing.JButton btnReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboFormat;
    private javax.swing.JComboBox comboParameter;
    private javax.swing.JComboBox comboQuery;
    private javax.swing.JComboBox comboReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFlightsFile;
    private javax.swing.JTextField txtLocationsFile;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
